let jwt,dotenv,errorMessage,status;_aaa‍.x([["verifyToken",()=>verifyToken],["isAdmin",()=>isAdmin]]);_aaa‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_aaa‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_aaa‍.w("../helpers/status",[["errorMessage",["errorMessage"],function(v){errorMessage=v}],["status",["status"],function(v){status=v}]]);/* eslint-disable max-len */





dotenv.config();

/**
 * Verify Token
 * @param {object} req
 * @param {object} res
 * @param {object} next
 * @returns {object|void} response object
 */
const isAdmin = async (req, res, next) => {
  const { token } = req.headers;
  if (!token) {
    errorMessage.error = 'Token not provided';
    return res.status(status.bad).send(errorMessage);
  }
  try {
    const decoded =  jwt.verify(token, process.env.SECRET);
    return decoded.is_admin
  } catch (error) {
    errorMessage.error = 'Not Authorized'
    return res.status(status.unauthorized).send(errorMessage);
  }
}

const verifyToken = async (req, res, next) => {
  const { token } = req.headers;
  if (!token) {
    errorMessage.error = 'Token not provided';
    return res.status(status.bad).send(errorMessage);
  }
  try {
    const decoded =  jwt.verify(token, process.env.SECRET);
    req.user = {
      email: decoded.email,
      user_id: decoded.user_id,
      is_admin: decoded.is_admin,
    };
    next();
  } catch (error) {
    errorMessage.error = 'Authentication Failed';
    return res.status(status.unauthorized).send(errorMessage);
  }
};



