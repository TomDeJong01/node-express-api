let express,cors,env,usersRoute,seedRoute,productsRoute,orderRoute;_16f‍.x([["default",()=>_16f‍.o]]);_16f‍.w("express",[["default",["express"],function(v){express=v}]]);_16f‍.w("babel-polyfill");_16f‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_16f‍.w("./env",[["default",["env"],function(v){env=v}]]);_16f‍.w("./app/routes/usersRoute",[["default",["usersRoute"],function(v){usersRoute=v}]]);_16f‍.w("./app/routes/seedRoute",[["default",["seedRoute"],function(v){seedRoute=v}]]);_16f‍.w("./app/routes/productsRoute",[["default",["productsRoute"],function(v){productsRoute=v}]]);_16f‍.w("./app/routes/orderRoute",[["default",["orderRoute"],function(v){orderRoute=v}]]);








const app = express();

// Add middleware for parsing URL encoded bodies (which are usually sent by browser)
app.use(cors());
// Add middleware for parsing JSON and urlencoded data and populating `req.body`
app.use(express.urlencoded({ extended: false }));
app.use(express.json());

app.use('/api/v1', usersRoute);
app.use('/api/v1', seedRoute);
app.use('/api/v1/products', productsRoute);
app.use('/api/v1/order', orderRoute);


// app.listen(env.port).on('listening', () => {
app.listen(env.port, "0.0.0.0").on('listening', () => {
    console.log(`live on port ${env.port}`);
});


_16f‍.d(app);
