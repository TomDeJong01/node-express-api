let bcrypt,jwt,env;_48e‍.x([["hashPassword",()=>hashPassword],["comparePassword",()=>comparePassword],["isValidEmail",()=>isValidEmail],["isValidZipcode",()=>isValidZipcode],["validatePassword",()=>validatePassword],["isEmpty",()=>isEmpty],["empty",()=>empty],["generateUserToken",()=>generateUserToken]]);_48e‍.w("bcryptjs",[["default",["bcrypt"],function(v){bcrypt=v}]]);_48e‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_48e‍.w("../../env",[["default",["env"],function(v){env=v}]]);


/**
   * Hash Password Method
   * @param {string} password
   * @returns {string} returns hashed password
   */
const saltRounds = 10;
const salt = bcrypt.genSaltSync(saltRounds);
const hashPassword = password => bcrypt.hashSync(password, salt);

/**
   * comparePassword
   * @param {string} hashPassword
   * @param {string} password
   * @returns {Boolean} return True or False
   */
const comparePassword = (hashedPassword, password) => {
  return bcrypt.compareSync(password, hashedPassword);
};

/**
   * isValidEmail helper method
   * @param {string} email
   * @returns {Boolean} True or False
   */
const isValidEmail = (email) => {
  const regEx = /\S+@\S+\.\S+/;
  return regEx.test(email);
};
/**
 * isValidZipcode helper method
 * @param {string} zipcode
 * @returns {Boolean} True or False
 */
const isValidZipcode = (zipcode) => {
  const regEx = /[0-9]{4}[A-Za-z]{2}/;
  return regEx.test(zipcode);
};

/**
   * validatePassword helper method
   * @param {string} password
   * @returns {Boolean} True or False
   */
const validatePassword = (password) => {
  return !(password.length <= 5 || password === '');
};
/**
   * isEmpty helper method
   * @param {string, integer} input
   * @returns {Boolean} True or False
   */
const isEmpty = (input) => {
  if (input === undefined || input === '') {
    return true;
  }
  return !input.replace(/\s/g, '').length;

};

/**
   * empty helper method
   * @param {string, integer} input
   * @returns {Boolean} True or False
   */
const empty = (input) => {
  if (input === undefined || input === '') {
    return true;
  }
};

/**
   * Generate Token
   * @param {string} id
   * @returns {string} token
   */
const generateUserToken = (email, id, is_admin) => {
  const token = jwt.sign({
    email,
    user_id: id,
    is_admin
  },
  env.secret, { expiresIn: '3d' });
  return token;
};











